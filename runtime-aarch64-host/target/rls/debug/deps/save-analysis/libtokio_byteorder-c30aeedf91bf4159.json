{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0","program":"/home/ms/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","tokio_byteorder","--edition=2018","/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=c30aeedf91bf4159","-C","extra-filename=-c30aeedf91bf4159","--out-dir","/home/ms/Data/repositories/git/golem/ya-runtime-vm/runtime-aarch64-host/target/rls/debug/deps","-L","dependency=/home/ms/Data/repositories/git/golem/ya-runtime-vm/runtime-aarch64-host/target/rls/debug/deps","--extern","byteorder=/home/ms/Data/repositories/git/golem/ya-runtime-vm/runtime-aarch64-host/target/rls/debug/deps/libbyteorder-9eb54ff1d33af7d4.rmeta","--extern","tokio=/home/ms/Data/repositories/git/golem/ya-runtime-vm/runtime-aarch64-host/target/rls/debug/deps/libtokio-da6a97db562163a0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/ms/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ms/Data/repositories/git/golem/ya-runtime-vm/runtime-aarch64-host/target/rls/debug/deps/libtokio_byteorder-c30aeedf91bf4159.rmeta"},"prelude":{"crate_id":{"name":"tokio_byteorder","disambiguator":[11191948867990130532,410266972001170121]},"crate_root":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src","external_crates":[{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8363989277313806732,13723635736355452392]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5755871685339259462,14524450630327408145]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6095990061662150844,17257511342173735843]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13534664360101634333,15955848543282431589]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2576337310504802494,7533979301291365915]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5114841071718684731,1147767992231475921]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14891534813972024149,13771932312545804845]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[904103305253144465,12292134317329413205]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[16314738562439622889,10306027504818249940]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15843431334828571128,5286674190927770495]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17405625562201081622,10275716470817790619]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11445955052790897216,5818918092474945162]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[14649202847011715524,6782578055671422766]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[7180995537586922820,7051902941398327739]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[9612987991627917998,10712864082221106628]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[17826240478786457486,5527832178130695808]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6600453779972510942,5977101663316138555]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":18,"id":{"name":"byteorder","disambiguator":[14261675325994227039,16121796425329868166]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":19,"id":{"name":"tokio","disambiguator":[16708093064355892846,12804780534403928137]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":20,"id":{"name":"pin_project_lite","disambiguator":[15820981581026781833,4520092457001798209]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":21,"id":{"name":"bytes","disambiguator":[9805254516301008098,1135819645984255095]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":22,"id":{"name":"lazy_static","disambiguator":[10949373214698449189,8475297847177132521]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":23,"id":{"name":"mio","disambiguator":[17457820063033818926,1941773494593740124]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":24,"id":{"name":"net2","disambiguator":[14879891528836953280,11387496253144091157]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":25,"id":{"name":"libc","disambiguator":[6242217621416390269,4381149088672971492]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":26,"id":{"name":"cfg_if","disambiguator":[16973315671725995844,13229000032311113664]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":27,"id":{"name":"iovec","disambiguator":[12248048533331643817,1966803472981358134]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":28,"id":{"name":"slab","disambiguator":[990849091620645912,11842746884328258516]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":29,"id":{"name":"log","disambiguator":[5747204959099557759,6116554487223522341]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":30,"id":{"name":"mio_uds","disambiguator":[1949571632753814314,14003813543730514323]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":31,"id":{"name":"fnv","disambiguator":[1058696452853710164,17123093765962455183]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":32,"id":{"name":"tokio_macros","disambiguator":[3070877843643601859,11338128388456002291]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":33,"id":{"name":"memchr","disambiguator":[12134194610424353991,9638621573686709255]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":34,"id":{"name":"num_cpus","disambiguator":[16818515877518659071,16234923965841112621]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":35,"id":{"name":"signal_hook_registry","disambiguator":[14092553211911232724,2924101676482988699]}},{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","num":36,"id":{"name":"arc_swap","disambiguator":[7221306356479711247,396900976268085178]}}],"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":0,"byte_end":41397,"line_start":1,"line_end":1233,"column_start":1,"column_end":61}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":316},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":2869,"byte_end":2878,"line_start":83,"line_end":83,"column_start":21,"column_end":30},"alias_span":null,"name":"BigEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":335},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":2880,"byte_end":2892,"line_start":83,"line_end":83,"column_start":32,"column_end":44},"alias_span":null,"name":"LittleEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":252},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":2894,"byte_end":2906,"line_start":83,"line_end":83,"column_start":46,"column_end":58},"alias_span":null,"name":"NativeEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":251},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":2908,"byte_end":2921,"line_start":83,"line_end":83,"column_start":60,"column_end":73},"alias_span":null,"name":"NetworkEndian","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":0,"byte_end":41397,"line_start":1,"line_end":1233,"column_start":1,"column_end":61},"name":"","qualname":"::","value":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":627},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":39},{"krate":0,"index":43},{"krate":0,"index":49},{"krate":0,"index":53},{"krate":0,"index":59},{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":85},{"krate":0,"index":90},{"krate":0,"index":95},{"krate":0,"index":103},{"krate":0,"index":108},{"krate":0,"index":113},{"krate":0,"index":121},{"krate":0,"index":126},{"krate":0,"index":131},{"krate":0,"index":139},{"krate":0,"index":144},{"krate":0,"index":149},{"krate":0,"index":157},{"krate":0,"index":162},{"krate":0,"index":167},{"krate":0,"index":175},{"krate":0,"index":180},{"krate":0,"index":185},{"krate":0,"index":193},{"krate":0,"index":198},{"krate":0,"index":203},{"krate":0,"index":211},{"krate":0,"index":216},{"krate":0,"index":221},{"krate":0,"index":229},{"krate":0,"index":234},{"krate":0,"index":239},{"krate":0,"index":247},{"krate":0,"index":252},{"krate":0,"index":257},{"krate":0,"index":265},{"krate":0,"index":270},{"krate":0,"index":275},{"krate":0,"index":283},{"krate":0,"index":288},{"krate":0,"index":293},{"krate":0,"index":301},{"krate":0,"index":306},{"krate":0,"index":22},{"krate":0,"index":27},{"krate":0,"index":353},{"krate":0,"index":358},{"krate":0,"index":362},{"krate":0,"index":367},{"krate":0,"index":371},{"krate":0,"index":377},{"krate":0,"index":382},{"krate":0,"index":386},{"krate":0,"index":392},{"krate":0,"index":397},{"krate":0,"index":401},{"krate":0,"index":407},{"krate":0,"index":412},{"krate":0,"index":416},{"krate":0,"index":422},{"krate":0,"index":427},{"krate":0,"index":431},{"krate":0,"index":437},{"krate":0,"index":442},{"krate":0,"index":446},{"krate":0,"index":452},{"krate":0,"index":457},{"krate":0,"index":461},{"krate":0,"index":467},{"krate":0,"index":472},{"krate":0,"index":476},{"krate":0,"index":482},{"krate":0,"index":487},{"krate":0,"index":491},{"krate":0,"index":497},{"krate":0,"index":502},{"krate":0,"index":506},{"krate":0,"index":512},{"krate":0,"index":517},{"krate":0,"index":521},{"krate":0,"index":527},{"krate":0,"index":532},{"krate":0,"index":536},{"krate":0,"index":542},{"krate":0,"index":547},{"krate":0,"index":551},{"krate":0,"index":557},{"krate":0,"index":562},{"krate":0,"index":566},{"krate":0,"index":572},{"krate":0,"index":577},{"krate":0,"index":32},{"krate":0,"index":37}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order] on top of asynchronous I/O streams.\nIt owes everything to the magnificent [`byteorder`] crate. This crate only\nprovides a shim to [`AsyncRead`] and [`AsyncWrite`].","sig":null,"attributes":[{"value":"*\nThis crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order] on top of asynchronous I/O streams.\nIt owes everything to the magnificent [`byteorder`] crate. This crate only\nprovides a shim to [`AsyncRead`] and [`AsyncWrite`].\n\nThe organization of the crate mirrors that of `byteorder`. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`AsyncReadBytesExt`] and\n[`AsyncWriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from an [`AsyncRead`] type:\n\n```rust\nuse std::io::Cursor;\nuse tokio_byteorder::{BigEndian, AsyncReadBytesExt};\n\n#[tokio::main]\nasync fn main() {\n    let mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n    // Note that we use type parameters to indicate which kind of byte order\n    // we want!\n    assert_eq!(517, rdr.read_u16::<BigEndian>().await.unwrap());\n    assert_eq!(768, rdr.read_u16::<BigEndian>().await.unwrap());\n}\n```\n\nWrite unsigned 16 bit little-endian integers to a [`AsyncWrite`] type:\n\n```rust\nuse tokio_byteorder::{LittleEndian, AsyncWriteBytesExt};\n\n#[tokio::main]\nasync fn main() {\n    let mut wtr = vec![];\n    wtr.write_u16::<LittleEndian>(517).await.unwrap();\n    wtr.write_u16::<LittleEndian>(768).await.unwrap();\n    assert_eq!(wtr, vec![5, 2, 0, 3]);\n}\n```\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`byteorder`]: https://github.com/BurntSushi/byteorder/\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`AsyncReadBytesExt`]: trait.AsyncReadBytesExt.html\n[`AsyncWriteBytesExt`]: trait.AsyncWriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`AsyncRead`]: https://docs.rs/tokio/0.2.0-alpha.4/tokio/io/trait.AsyncRead.html\n[`AsyncWrite`]: https://docs.rs/tokio/0.2.0-alpha.4/tokio/io/trait.AsyncWrite.html\n*/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":0,"byte_end":2611,"line_start":1,"line_end":70,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":2613,"byte_end":2635,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":2636,"byte_end":2662,"line_start":73,"line_end":73,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":39},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6213,"byte_end":6219,"line_start":175,"line_end":175,"column_start":10,"column_end":16},"name":"ReadU8","qualname":"::ReadU8","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":49},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6235,"byte_end":6241,"line_start":176,"line_end":176,"column_start":10,"column_end":16},"name":"ReadI8","qualname":"::ReadI8","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":59},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6257,"byte_end":6264,"line_start":178,"line_end":178,"column_start":9,"column_end":16},"name":"ReadF32","qualname":"::ReadF32","value":"ReadF32 {  }","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":77},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6290,"byte_end":6297,"line_start":179,"line_end":179,"column_start":9,"column_end":16},"name":"ReadF64","qualname":"::ReadF64","value":"ReadF64 {  }","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":95},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6323,"byte_end":6330,"line_start":180,"line_end":180,"column_start":9,"column_end":16},"name":"ReadU16","qualname":"::ReadU16","value":"ReadU16 {  }","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":113},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6356,"byte_end":6363,"line_start":181,"line_end":181,"column_start":9,"column_end":16},"name":"ReadU24","qualname":"::ReadU24","value":"ReadU24 {  }","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":131},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6392,"byte_end":6399,"line_start":182,"line_end":182,"column_start":9,"column_end":16},"name":"ReadU32","qualname":"::ReadU32","value":"ReadU32 {  }","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":149},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6425,"byte_end":6432,"line_start":183,"line_end":183,"column_start":9,"column_end":16},"name":"ReadU48","qualname":"::ReadU48","value":"ReadU48 {  }","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":167},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6461,"byte_end":6468,"line_start":184,"line_end":184,"column_start":9,"column_end":16},"name":"ReadU64","qualname":"::ReadU64","value":"ReadU64 {  }","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":185},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6494,"byte_end":6502,"line_start":185,"line_end":185,"column_start":9,"column_end":17},"name":"ReadU128","qualname":"::ReadU128","value":"ReadU128 {  }","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":203},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6530,"byte_end":6537,"line_start":186,"line_end":186,"column_start":9,"column_end":16},"name":"ReadI16","qualname":"::ReadI16","value":"ReadI16 {  }","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":221},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6563,"byte_end":6570,"line_start":187,"line_end":187,"column_start":9,"column_end":16},"name":"ReadI24","qualname":"::ReadI24","value":"ReadI24 {  }","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":239},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6599,"byte_end":6606,"line_start":188,"line_end":188,"column_start":9,"column_end":16},"name":"ReadI32","qualname":"::ReadI32","value":"ReadI32 {  }","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":257},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6632,"byte_end":6639,"line_start":189,"line_end":189,"column_start":9,"column_end":16},"name":"ReadI48","qualname":"::ReadI48","value":"ReadI48 {  }","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":275},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6668,"byte_end":6675,"line_start":190,"line_end":190,"column_start":9,"column_end":16},"name":"ReadI64","qualname":"::ReadI64","value":"ReadI64 {  }","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":293},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6701,"byte_end":6709,"line_start":191,"line_end":191,"column_start":9,"column_end":17},"name":"ReadI128","qualname":"::ReadI128","value":"ReadI128 {  }","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7946,"byte_end":7963,"line_start":231,"line_end":231,"column_start":11,"column_end":28},"name":"AsyncReadBytesExt","qualname":"::AsyncReadBytesExt","value":"AsyncReadBytesExt: io::AsyncRead","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":347},{"krate":0,"index":350}],"decl_id":null,"docs":" Extends [`AsyncRead`] with methods for reading numbers.","sig":null,"attributes":[{"value":"/ Extends [`AsyncRead`] with methods for reading numbers.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7037,"byte_end":7096,"line_start":206,"line_end":206,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7097,"byte_end":7100,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7101,"byte_end":7179,"line_start":208,"line_end":208,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7180,"byte_end":7258,"line_start":209,"line_end":209,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7259,"byte_end":7329,"line_start":210,"line_end":210,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7330,"byte_end":7333,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7334,"byte_end":7348,"line_start":212,"line_end":212,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7349,"byte_end":7352,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ Read unsigned 16 bit big-endian integers from a [`Read`]:","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7353,"byte_end":7414,"line_start":214,"line_end":214,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7415,"byte_end":7418,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7419,"byte_end":7430,"line_start":216,"line_end":216,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7431,"byte_end":7455,"line_start":217,"line_end":217,"column_start":1,"column_end":25}},{"value":"/ use tokio_byteorder::{BigEndian, AsyncReadBytesExt};","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7456,"byte_end":7512,"line_start":218,"line_end":218,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7513,"byte_end":7516,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7517,"byte_end":7535,"line_start":220,"line_end":220,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7536,"byte_end":7557,"line_start":221,"line_end":221,"column_start":1,"column_end":22}},{"value":"/     let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7558,"byte_end":7610,"line_start":222,"line_end":222,"column_start":1,"column_end":53}},{"value":"/     assert_eq!(517, rdr.read_u16::<BigEndian>().await.unwrap());","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7611,"byte_end":7679,"line_start":223,"line_end":223,"column_start":1,"column_end":69}},{"value":"/     assert_eq!(768, rdr.read_u16::<BigEndian>().await.unwrap());","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7680,"byte_end":7748,"line_start":224,"line_end":224,"column_start":1,"column_end":69}},{"value":"/ }","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7749,"byte_end":7754,"line_start":225,"line_end":225,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7755,"byte_end":7762,"line_start":226,"line_end":226,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7763,"byte_end":7766,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7767,"byte_end":7805,"line_start":228,"line_end":228,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7806,"byte_end":7850,"line_start":229,"line_end":229,"column_start":1,"column_end":45}},{"value":"/ [`AsyncRead`]: https://docs.rs/tokio/0.2.0-alpha.4/tokio/io/trait.AsyncRead.html","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7851,"byte_end":7935,"line_start":230,"line_end":230,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8844,"byte_end":8851,"line_start":259,"line_end":259,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::AsyncReadBytesExt::read_u8","value":"pub fn read_u8<'a>(&'a mut Self) -> ReadU8<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 8 bit integer from the underlying reader.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7985,"byte_end":8048,"line_start":232,"line_end":232,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8053,"byte_end":8056,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8061,"byte_end":8132,"line_start":234,"line_end":234,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8137,"byte_end":8183,"line_start":235,"line_end":235,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8188,"byte_end":8191,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8196,"byte_end":8208,"line_start":237,"line_end":237,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8213,"byte_end":8216,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8221,"byte_end":8285,"line_start":239,"line_end":239,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8290,"byte_end":8293,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8298,"byte_end":8390,"line_start":241,"line_end":241,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8395,"byte_end":8398,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8403,"byte_end":8417,"line_start":243,"line_end":243,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8422,"byte_end":8425,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Read unsigned 8 bit integers from a `Read`:","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8430,"byte_end":8477,"line_start":245,"line_end":245,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8482,"byte_end":8485,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8490,"byte_end":8501,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8506,"byte_end":8530,"line_start":248,"line_end":248,"column_start":5,"column_end":29}},{"value":"/ use tokio_byteorder::AsyncReadBytesExt;","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8535,"byte_end":8578,"line_start":249,"line_end":249,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8583,"byte_end":8586,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8591,"byte_end":8609,"line_start":251,"line_end":251,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8614,"byte_end":8635,"line_start":252,"line_end":252,"column_start":5,"column_end":26}},{"value":"/     let mut rdr = Cursor::new(vec![2, 5]);","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8640,"byte_end":8686,"line_start":253,"line_end":253,"column_start":5,"column_end":51}},{"value":"/     assert_eq!(2, rdr.read_u8().await.unwrap());","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8691,"byte_end":8743,"line_start":254,"line_end":254,"column_start":5,"column_end":57}},{"value":"/     assert_eq!(5, rdr.read_u8().await.unwrap());","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8748,"byte_end":8800,"line_start":255,"line_end":255,"column_start":5,"column_end":57}},{"value":"/ }","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8805,"byte_end":8810,"line_start":256,"line_end":256,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8815,"byte_end":8822,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8827,"byte_end":8836,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9824,"byte_end":9831,"line_start":293,"line_end":293,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::AsyncReadBytesExt::read_i8","value":"pub fn read_i8<'a>(&'a mut Self) -> ReadI8<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 8 bit integer from the underlying reader.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":8963,"byte_end":9023,"line_start":266,"line_end":266,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9028,"byte_end":9031,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9036,"byte_end":9107,"line_start":268,"line_end":268,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9112,"byte_end":9158,"line_start":269,"line_end":269,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9163,"byte_end":9166,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9171,"byte_end":9183,"line_start":271,"line_end":271,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9188,"byte_end":9191,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Read::read_exact`].","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9196,"byte_end":9260,"line_start":273,"line_end":273,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9265,"byte_end":9268,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ [`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9273,"byte_end":9365,"line_start":275,"line_end":275,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9370,"byte_end":9373,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9378,"byte_end":9392,"line_start":277,"line_end":277,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9397,"byte_end":9400,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Read signed 8 bit integers from a `Read`:","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9405,"byte_end":9450,"line_start":279,"line_end":279,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9455,"byte_end":9458,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9463,"byte_end":9474,"line_start":281,"line_end":281,"column_start":5,"column_end":16}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9479,"byte_end":9503,"line_start":282,"line_end":282,"column_start":5,"column_end":29}},{"value":"/ use tokio_byteorder::AsyncReadBytesExt;","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9508,"byte_end":9551,"line_start":283,"line_end":283,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9556,"byte_end":9559,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9564,"byte_end":9582,"line_start":285,"line_end":285,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9587,"byte_end":9608,"line_start":286,"line_end":286,"column_start":5,"column_end":26}},{"value":"/     let mut rdr = Cursor::new(vec![0x02, 0xfb]);","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9613,"byte_end":9665,"line_start":287,"line_end":287,"column_start":5,"column_end":57}},{"value":"/     assert_eq!(2, rdr.read_i8().await.unwrap());","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9670,"byte_end":9722,"line_start":288,"line_end":288,"column_start":5,"column_end":57}},{"value":"/     assert_eq!(-5, rdr.read_i8().await.unwrap());","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9727,"byte_end":9780,"line_start":289,"line_end":289,"column_start":5,"column_end":58}},{"value":"/ }","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9785,"byte_end":9790,"line_start":290,"line_end":290,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9795,"byte_end":9802,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":9807,"byte_end":9816,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":10830,"byte_end":10838,"line_start":324,"line_end":324,"column_start":12,"column_end":20},"name":"read_u16","qualname":"::AsyncReadBytesExt::read_u16","value":"pub fn read_u16<'a, T: ByteOrder>(&'a mut Self) -> ReadU16<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":11767,"byte_end":11775,"line_start":351,"line_end":351,"column_start":12,"column_end":20},"name":"read_i16","qualname":"::AsyncReadBytesExt::read_i16","value":"pub fn read_i16<'a, T: ByteOrder>(&'a mut Self) -> ReadI16<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":12625,"byte_end":12633,"line_start":377,"line_end":377,"column_start":12,"column_end":20},"name":"read_u24","qualname":"::AsyncReadBytesExt::read_u24","value":"pub fn read_u24<'a, T: ByteOrder>(&'a mut Self) -> ReadU24<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":13481,"byte_end":13489,"line_start":403,"line_end":403,"column_start":12,"column_end":20},"name":"read_i24","qualname":"::AsyncReadBytesExt::read_i24","value":"pub fn read_i24<'a, T: ByteOrder>(&'a mut Self) -> ReadI24<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":14345,"byte_end":14353,"line_start":429,"line_end":429,"column_start":12,"column_end":20},"name":"read_u32","qualname":"::AsyncReadBytesExt::read_u32","value":"pub fn read_u32<'a, T: ByteOrder>(&'a mut Self) -> ReadU32<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":15207,"byte_end":15215,"line_start":455,"line_end":455,"column_start":12,"column_end":20},"name":"read_i32","qualname":"::AsyncReadBytesExt::read_i32","value":"pub fn read_i32<'a, T: ByteOrder>(&'a mut Self) -> ReadI32<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":16095,"byte_end":16103,"line_start":481,"line_end":481,"column_start":12,"column_end":20},"name":"read_u48","qualname":"::AsyncReadBytesExt::read_u48","value":"pub fn read_u48<'a, T: ByteOrder>(&'a mut Self) -> ReadU48<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":16979,"byte_end":16987,"line_start":507,"line_end":507,"column_start":12,"column_end":20},"name":"read_i48","qualname":"::AsyncReadBytesExt::read_i48","value":"pub fn read_i48<'a, T: ByteOrder>(&'a mut Self) -> ReadI48<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":17881,"byte_end":17889,"line_start":533,"line_end":533,"column_start":12,"column_end":20},"name":"read_u64","qualname":"::AsyncReadBytesExt::read_u64","value":"pub fn read_u64<'a, T: ByteOrder>(&'a mut Self) -> ReadU64<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":18757,"byte_end":18765,"line_start":559,"line_end":559,"column_start":12,"column_end":20},"name":"read_i64","qualname":"::AsyncReadBytesExt::read_i64","value":"pub fn read_i64<'a, T: ByteOrder>(&'a mut Self) -> ReadI64<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":19788,"byte_end":19797,"line_start":588,"line_end":588,"column_start":12,"column_end":21},"name":"read_u128","qualname":"::AsyncReadBytesExt::read_u128","value":"pub fn read_u128<'a, T: ByteOrder>(&'a mut Self) -> ReadU128<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":20694,"byte_end":20703,"line_start":614,"line_end":614,"column_start":12,"column_end":21},"name":"read_i128","qualname":"::AsyncReadBytesExt::read_i128","value":"pub fn read_i128<'a, T: ByteOrder>(&'a mut Self) -> ReadI128<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":21721,"byte_end":21729,"line_start":646,"line_end":646,"column_start":12,"column_end":20},"name":"read_f32","qualname":"::AsyncReadBytesExt::read_f32","value":"pub fn read_f32<'a, T: ByteOrder>(&'a mut Self) -> ReadF32<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":22742,"byte_end":22750,"line_start":676,"line_end":676,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::AsyncReadBytesExt::read_f64","value":"pub fn read_f64<'a, T: ByteOrder>(&'a mut Self) -> ReadF64<&'a mut Self, T>\nwhere Self: Unpin","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":6878,"byte_end":6887,"line_start":199,"line_end":199,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":353},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":25840,"byte_end":25847,"line_start":767,"line_end":767,"column_start":10,"column_end":17},"name":"WriteU8","qualname":"::WriteU8","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":25863,"byte_end":25870,"line_start":768,"line_end":768,"column_start":10,"column_end":17},"name":"WriteI8","qualname":"::WriteI8","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":25886,"byte_end":25894,"line_start":770,"line_end":770,"column_start":9,"column_end":17},"name":"WriteF32","qualname":"::WriteF32","value":"WriteF32 {  }","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":376}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":386},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":25921,"byte_end":25929,"line_start":771,"line_end":771,"column_start":9,"column_end":17},"name":"WriteF64","qualname":"::WriteF64","value":"WriteF64 {  }","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":391}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":401},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":25956,"byte_end":25964,"line_start":772,"line_end":772,"column_start":9,"column_end":17},"name":"WriteU16","qualname":"::WriteU16","value":"WriteU16 {  }","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":406}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":416},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":25991,"byte_end":25999,"line_start":773,"line_end":773,"column_start":9,"column_end":17},"name":"WriteU24","qualname":"::WriteU24","value":"WriteU24 {  }","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":421}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":431},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26029,"byte_end":26037,"line_start":774,"line_end":774,"column_start":9,"column_end":17},"name":"WriteU32","qualname":"::WriteU32","value":"WriteU32 {  }","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":436}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":446},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26064,"byte_end":26072,"line_start":775,"line_end":775,"column_start":9,"column_end":17},"name":"WriteU48","qualname":"::WriteU48","value":"WriteU48 {  }","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":451}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":461},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26102,"byte_end":26110,"line_start":776,"line_end":776,"column_start":9,"column_end":17},"name":"WriteU64","qualname":"::WriteU64","value":"WriteU64 {  }","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":466}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":476},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26137,"byte_end":26146,"line_start":777,"line_end":777,"column_start":9,"column_end":18},"name":"WriteU128","qualname":"::WriteU128","value":"WriteU128 {  }","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":481}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":491},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26175,"byte_end":26183,"line_start":778,"line_end":778,"column_start":9,"column_end":17},"name":"WriteI16","qualname":"::WriteI16","value":"WriteI16 {  }","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":496}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":506},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26210,"byte_end":26218,"line_start":779,"line_end":779,"column_start":9,"column_end":17},"name":"WriteI24","qualname":"::WriteI24","value":"WriteI24 {  }","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":511}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":521},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26248,"byte_end":26256,"line_start":780,"line_end":780,"column_start":9,"column_end":17},"name":"WriteI32","qualname":"::WriteI32","value":"WriteI32 {  }","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":526}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":536},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26283,"byte_end":26291,"line_start":781,"line_end":781,"column_start":9,"column_end":17},"name":"WriteI48","qualname":"::WriteI48","value":"WriteI48 {  }","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":541}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":551},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26321,"byte_end":26329,"line_start":782,"line_end":782,"column_start":9,"column_end":17},"name":"WriteI64","qualname":"::WriteI64","value":"WriteI64 {  }","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":555},{"krate":0,"index":556}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":566},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26356,"byte_end":26365,"line_start":783,"line_end":783,"column_start":9,"column_end":18},"name":"WriteI128","qualname":"::WriteI128","value":"WriteI128 {  }","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":571}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27601,"byte_end":27619,"line_start":823,"line_end":823,"column_start":11,"column_end":29},"name":"AsyncWriteBytesExt","qualname":"::AsyncWriteBytesExt","value":"AsyncWriteBytesExt: io::AsyncWrite","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":581},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":620}],"decl_id":null,"docs":" Extends [`AsyncWrite`] with methods for writing numbers.","sig":null,"attributes":[{"value":"/ Extends [`AsyncWrite`] with methods for writing numbers.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26719,"byte_end":26779,"line_start":798,"line_end":798,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26780,"byte_end":26783,"line_start":799,"line_end":799,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26784,"byte_end":26862,"line_start":800,"line_end":800,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26863,"byte_end":26941,"line_start":801,"line_end":801,"column_start":1,"column_end":79}},{"value":"/ the [`BigEndian`] or [`LittleEndian`] types defined in this crate.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26942,"byte_end":27012,"line_start":802,"line_end":802,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27013,"byte_end":27016,"line_start":803,"line_end":803,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27017,"byte_end":27031,"line_start":804,"line_end":804,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27032,"byte_end":27035,"line_start":805,"line_end":805,"column_start":1,"column_end":4}},{"value":"/ Write unsigned 16 bit big-endian integers to a [`Write`]:","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27036,"byte_end":27097,"line_start":806,"line_end":806,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27098,"byte_end":27101,"line_start":807,"line_end":807,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27102,"byte_end":27113,"line_start":808,"line_end":808,"column_start":1,"column_end":12}},{"value":"/ use tokio_byteorder::{BigEndian, AsyncWriteBytesExt};","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27114,"byte_end":27171,"line_start":809,"line_end":809,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27172,"byte_end":27175,"line_start":810,"line_end":810,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27176,"byte_end":27194,"line_start":811,"line_end":811,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27195,"byte_end":27216,"line_start":812,"line_end":812,"column_start":1,"column_end":22}},{"value":"/     let mut wtr = vec![];","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27217,"byte_end":27246,"line_start":813,"line_end":813,"column_start":1,"column_end":30}},{"value":"/     wtr.write_u16::<BigEndian>(517).await.unwrap();","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27247,"byte_end":27302,"line_start":814,"line_end":814,"column_start":1,"column_end":56}},{"value":"/     wtr.write_u16::<BigEndian>(768).await.unwrap();","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27303,"byte_end":27358,"line_start":815,"line_end":815,"column_start":1,"column_end":56}},{"value":"/     assert_eq!(wtr, vec![2, 5, 3, 0]);","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27359,"byte_end":27401,"line_start":816,"line_end":816,"column_start":1,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27402,"byte_end":27407,"line_start":817,"line_end":817,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27408,"byte_end":27415,"line_start":818,"line_end":818,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27416,"byte_end":27419,"line_start":819,"line_end":819,"column_start":1,"column_end":4}},{"value":"/ [`BigEndian`]: enum.BigEndian.html","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27420,"byte_end":27458,"line_start":820,"line_end":820,"column_start":1,"column_end":39}},{"value":"/ [`LittleEndian`]: enum.LittleEndian.html","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27459,"byte_end":27503,"line_start":821,"line_end":821,"column_start":1,"column_end":45}},{"value":"/ [`AsyncWrite`]: https://docs.rs/tokio/0.2.0-alpha.4/tokio/io/trait.AsyncWrite.html","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27504,"byte_end":27590,"line_start":822,"line_end":822,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28478,"byte_end":28486,"line_start":851,"line_end":851,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::AsyncWriteBytesExt::write_u8","value":"pub fn write_u8<'a>(&'a mut Self, u8) -> WriteU8<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 8 bit integer to the underlying writer.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27642,"byte_end":27704,"line_start":824,"line_end":824,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27709,"byte_end":27712,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27717,"byte_end":27789,"line_start":826,"line_end":826,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27794,"byte_end":27840,"line_start":827,"line_end":827,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27845,"byte_end":27848,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27853,"byte_end":27865,"line_start":829,"line_end":829,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27870,"byte_end":27873,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27878,"byte_end":27942,"line_start":831,"line_end":831,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27947,"byte_end":27950,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27955,"byte_end":28047,"line_start":833,"line_end":833,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28052,"byte_end":28055,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28060,"byte_end":28074,"line_start":835,"line_end":835,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28079,"byte_end":28082,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ Write unsigned 8 bit integers to a `Write`:","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28087,"byte_end":28134,"line_start":837,"line_end":837,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28139,"byte_end":28142,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28147,"byte_end":28158,"line_start":839,"line_end":839,"column_start":5,"column_end":16}},{"value":"/ use tokio_byteorder::{AsyncWriteBytesExt};","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28163,"byte_end":28209,"line_start":840,"line_end":840,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28214,"byte_end":28217,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28222,"byte_end":28240,"line_start":842,"line_end":842,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28245,"byte_end":28266,"line_start":843,"line_end":843,"column_start":5,"column_end":26}},{"value":"/     let mut wtr = Vec::new();","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28271,"byte_end":28304,"line_start":844,"line_end":844,"column_start":5,"column_end":38}},{"value":"/     wtr.write_u8(2).await.unwrap();","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28309,"byte_end":28348,"line_start":845,"line_end":845,"column_start":5,"column_end":44}},{"value":"/     wtr.write_u8(5).await.unwrap();","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28353,"byte_end":28392,"line_start":846,"line_end":846,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(wtr, b\"\\x02\\x05\");","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28397,"byte_end":28434,"line_start":847,"line_end":847,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28439,"byte_end":28444,"line_start":848,"line_end":848,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28449,"byte_end":28456,"line_start":849,"line_end":849,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28461,"byte_end":28470,"line_start":850,"line_end":850,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29442,"byte_end":29450,"line_start":885,"line_end":885,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::AsyncWriteBytesExt::write_i8","value":"pub fn write_i8<'a>(&'a mut Self, i8) -> WriteI8<&'a mut Self> where\nSelf: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 8 bit integer to the underlying writer.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28610,"byte_end":28669,"line_start":858,"line_end":858,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28674,"byte_end":28677,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28682,"byte_end":28754,"line_start":860,"line_end":860,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28759,"byte_end":28805,"line_start":861,"line_end":861,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28810,"byte_end":28813,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28818,"byte_end":28830,"line_start":863,"line_end":863,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28835,"byte_end":28838,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This method returns the same errors as [`Write::write_all`].","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28843,"byte_end":28907,"line_start":865,"line_end":865,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28912,"byte_end":28915,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ [`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":28920,"byte_end":29012,"line_start":867,"line_end":867,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29017,"byte_end":29020,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29025,"byte_end":29039,"line_start":869,"line_end":869,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29044,"byte_end":29047,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ Write signed 8 bit integers to a `Write`:","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29052,"byte_end":29097,"line_start":871,"line_end":871,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29102,"byte_end":29105,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29110,"byte_end":29121,"line_start":873,"line_end":873,"column_start":5,"column_end":16}},{"value":"/ use tokio_byteorder::{AsyncWriteBytesExt};","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29126,"byte_end":29172,"line_start":874,"line_end":874,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29177,"byte_end":29180,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ #[tokio::main]","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29185,"byte_end":29203,"line_start":876,"line_end":876,"column_start":5,"column_end":23}},{"value":"/ async fn main() {","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29208,"byte_end":29229,"line_start":877,"line_end":877,"column_start":5,"column_end":26}},{"value":"/     let mut wtr = Vec::new();","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29234,"byte_end":29267,"line_start":878,"line_end":878,"column_start":5,"column_end":38}},{"value":"/     wtr.write_i8(2).await.unwrap();","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29272,"byte_end":29311,"line_start":879,"line_end":879,"column_start":5,"column_end":44}},{"value":"/     wtr.write_i8(-5).await.unwrap();","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29316,"byte_end":29356,"line_start":880,"line_end":880,"column_start":5,"column_end":45}},{"value":"/     assert_eq!(wtr, b\"\\x02\\xfb\");","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29361,"byte_end":29398,"line_start":881,"line_end":881,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29403,"byte_end":29408,"line_start":882,"line_end":882,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29413,"byte_end":29420,"line_start":883,"line_end":883,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":29425,"byte_end":29434,"line_start":884,"line_end":884,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":30438,"byte_end":30447,"line_start":916,"line_end":916,"column_start":12,"column_end":21},"name":"write_u16","qualname":"::AsyncWriteBytesExt::write_u16","value":"pub fn write_u16<'a, T: ByteOrder>(&'a mut Self, u16)\n-> WriteU16<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":31350,"byte_end":31359,"line_start":943,"line_end":943,"column_start":12,"column_end":21},"name":"write_i16","qualname":"::AsyncWriteBytesExt::write_i16","value":"pub fn write_i16<'a, T: ByteOrder>(&'a mut Self, i16)\n-> WriteI16<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":32277,"byte_end":32286,"line_start":970,"line_end":970,"column_start":12,"column_end":21},"name":"write_u24","qualname":"::AsyncWriteBytesExt::write_u24","value":"pub fn write_u24<'a, T: ByteOrder>(&'a mut Self, u32)\n-> WriteU24<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":33202,"byte_end":33211,"line_start":997,"line_end":997,"column_start":12,"column_end":21},"name":"write_i24","qualname":"::AsyncWriteBytesExt::write_i24","value":"pub fn write_i24<'a, T: ByteOrder>(&'a mut Self, i32)\n-> WriteI24<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":34141,"byte_end":34150,"line_start":1024,"line_end":1024,"column_start":12,"column_end":21},"name":"write_u32","qualname":"::AsyncWriteBytesExt::write_u32","value":"pub fn write_u32<'a, T: ByteOrder>(&'a mut Self, u32)\n-> WriteU32<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":35078,"byte_end":35087,"line_start":1051,"line_end":1051,"column_start":12,"column_end":21},"name":"write_i32","qualname":"::AsyncWriteBytesExt::write_i32","value":"pub fn write_i32<'a, T: ByteOrder>(&'a mut Self, i32)\n-> WriteI32<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":36037,"byte_end":36046,"line_start":1078,"line_end":1078,"column_start":12,"column_end":21},"name":"write_u48","qualname":"::AsyncWriteBytesExt::write_u48","value":"pub fn write_u48<'a, T: ByteOrder>(&'a mut Self, u64)\n-> WriteU48<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":36992,"byte_end":37001,"line_start":1105,"line_end":1105,"column_start":12,"column_end":21},"name":"write_i48","qualname":"::AsyncWriteBytesExt::write_i48","value":"pub fn write_i48<'a, T: ByteOrder>(&'a mut Self, i64)\n-> WriteI48<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":37968,"byte_end":37977,"line_start":1132,"line_end":1132,"column_start":12,"column_end":21},"name":"write_u64","qualname":"::AsyncWriteBytesExt::write_u64","value":"pub fn write_u64<'a, T: ByteOrder>(&'a mut Self, u64)\n-> WriteU64<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":38953,"byte_end":38962,"line_start":1159,"line_end":1159,"column_start":12,"column_end":21},"name":"write_i64","qualname":"::AsyncWriteBytesExt::write_i64","value":"pub fn write_i64<'a, T: ByteOrder>(&'a mut Self, i64)\n-> WriteI64<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":39103,"byte_end":39113,"line_start":1164,"line_end":1164,"column_start":12,"column_end":22},"name":"write_u128","qualname":"::AsyncWriteBytesExt::write_u128","value":"pub fn write_u128<'a, T: ByteOrder>(&'a mut Self, u128)\n-> WriteU128<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":39253,"byte_end":39263,"line_start":1169,"line_end":1169,"column_start":12,"column_end":22},"name":"write_i128","qualname":"::AsyncWriteBytesExt::write_i128","value":"pub fn write_i128<'a, T: ByteOrder>(&'a mut Self, i128)\n-> WriteI128<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":40231,"byte_end":40240,"line_start":1199,"line_end":1199,"column_start":12,"column_end":21},"name":"write_f32","qualname":"::AsyncWriteBytesExt::write_f32","value":"pub fn write_f32<'a, T: ByteOrder>(&'a mut Self, f32)\n-> WriteF32<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":41197,"byte_end":41206,"line_start":1227,"line_end":1227,"column_start":12,"column_end":21},"name":"write_f64","qualname":"::AsyncWriteBytesExt::write_f64","value":"pub fn write_f64<'a, T: ByteOrder>(&'a mut Self, f64)\n-> WriteF64<&'a mut Self> where Self: Unpin","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":26547,"byte_end":26556,"line_start":791,"line_end":791,"column_start":9,"column_end":18}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":22960,"byte_end":22961,"line_start":684,"line_end":684,"column_start":55,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":41393,"byte_end":41394,"line_start":1233,"line_end":1233,"column_start":57,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":7969,"byte_end":7978,"line_start":231,"line_end":231,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":19,"index":215},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":22960,"byte_end":22961,"line_start":684,"line_end":684,"column_start":55,"column_end":56},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":28},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":27625,"byte_end":27635,"line_start":823,"line_end":823,"column_start":35,"column_end":45},"kind":"SuperTrait","from":{"krate":19,"index":271},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/ms/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-byteorder-0.2.0/src/lib.rs","byte_start":41393,"byte_end":41394,"line_start":1233,"line_end":1233,"column_start":57,"column_end":58},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":38},"to":{"krate":0,"index":32}}]}